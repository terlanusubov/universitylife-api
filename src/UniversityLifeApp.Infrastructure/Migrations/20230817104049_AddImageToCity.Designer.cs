// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UniversityLifeApp.Infrastructure.Data;

#nullable disable

namespace UniversityLifeApp.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20230817104049_AddImageToCity")]
    partial class AddImageToCity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("UniversityLifeApp.Domain.Entities.BedRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BedRoomStatusId")
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<float>("DistanceToCenter")
                        .HasColumnType("float");

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("BedRooms");
                });

            modelBuilder.Entity("UniversityLifeApp.Domain.Entities.BedRoomPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BedroomId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsMain")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("BedroomId");

                    b.ToTable("BedRoomPhotos");
                });

            modelBuilder.Entity("UniversityLifeApp.Domain.Entities.BedRoomRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BedRoomId")
                        .HasColumnType("int");

                    b.Property<int>("BedRoomRoomStatusId")
                        .HasColumnType("int");

                    b.Property<int>("BedRoomRoomTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<float>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("BedRoomId");

                    b.HasIndex("BedRoomRoomTypeId");

                    b.ToTable("BedRoomRooms");
                });

            modelBuilder.Entity("UniversityLifeApp.Domain.Entities.BedRoomRoomApply", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Applied")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("BedRoomRoomApplyStatusId")
                        .HasColumnType("int");

                    b.Property<int>("BedRoomRoomId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BedRoomRoomId");

                    b.HasIndex("UserId");

                    b.ToTable("BedRoomRoomApplies");
                });

            modelBuilder.Entity("UniversityLifeApp.Domain.Entities.BedRoomRoomPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BedRoomRoomId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsMain")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("BedRoomRoomId");

                    b.ToTable("BedRoomRoomPhotos");
                });

            modelBuilder.Entity("UniversityLifeApp.Domain.Entities.BedRoomRoomType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BedRoomId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("BedRoomId");

                    b.ToTable("BedRoomRoomTypes");
                });

            modelBuilder.Entity("UniversityLifeApp.Domain.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CityStatusId")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsTop")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("UniversityLifeApp.Domain.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CountryStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("UniversityLifeApp.Domain.Entities.Logs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("IPAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("LogType")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("UniversityLifeApp.Domain.Entities.University", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UniversityStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Universities");
                });

            modelBuilder.Entity("UniversityLifeApp.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varbinary(32)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserRoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserStatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserRoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("UniversityLifeApp.Domain.Entities.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("UniversityLifeApp.Domain.Entities.UserWishlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BedRoomId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BedRoomId");

                    b.HasIndex("UserId");

                    b.ToTable("UserWishlists");
                });

            modelBuilder.Entity("UniversityLifeApp.Domain.Entities.BedRoom", b =>
                {
                    b.HasOne("UniversityLifeApp.Domain.Entities.City", "City")
                        .WithMany("BedRooms")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("UniversityLifeApp.Domain.Entities.BedRoomPhoto", b =>
                {
                    b.HasOne("UniversityLifeApp.Domain.Entities.BedRoom", "BedRoom")
                        .WithMany("BedRoomPhotos")
                        .HasForeignKey("BedroomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BedRoom");
                });

            modelBuilder.Entity("UniversityLifeApp.Domain.Entities.BedRoomRoom", b =>
                {
                    b.HasOne("UniversityLifeApp.Domain.Entities.BedRoom", "BedRoom")
                        .WithMany("BedRoomRooms")
                        .HasForeignKey("BedRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UniversityLifeApp.Domain.Entities.BedRoomRoomType", "BedRoomRoomType")
                        .WithMany("BedRoomRooms")
                        .HasForeignKey("BedRoomRoomTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BedRoom");

                    b.Navigation("BedRoomRoomType");
                });

            modelBuilder.Entity("UniversityLifeApp.Domain.Entities.BedRoomRoomApply", b =>
                {
                    b.HasOne("UniversityLifeApp.Domain.Entities.BedRoomRoom", "BedRoomRoom")
                        .WithMany("BedRoomRoomApplies")
                        .HasForeignKey("BedRoomRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UniversityLifeApp.Domain.Entities.User", "User")
                        .WithMany("BedRoomRoomApplies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BedRoomRoom");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UniversityLifeApp.Domain.Entities.BedRoomRoomPhoto", b =>
                {
                    b.HasOne("UniversityLifeApp.Domain.Entities.BedRoomRoom", "BedRoomRoom")
                        .WithMany("BedRoomRoomPhotos")
                        .HasForeignKey("BedRoomRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BedRoomRoom");
                });

            modelBuilder.Entity("UniversityLifeApp.Domain.Entities.BedRoomRoomType", b =>
                {
                    b.HasOne("UniversityLifeApp.Domain.Entities.BedRoom", "BedRoom")
                        .WithMany("BedRoomRoomTypes")
                        .HasForeignKey("BedRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BedRoom");
                });

            modelBuilder.Entity("UniversityLifeApp.Domain.Entities.City", b =>
                {
                    b.HasOne("UniversityLifeApp.Domain.Entities.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("UniversityLifeApp.Domain.Entities.University", b =>
                {
                    b.HasOne("UniversityLifeApp.Domain.Entities.City", "City")
                        .WithMany("Universities")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("UniversityLifeApp.Domain.Entities.User", b =>
                {
                    b.HasOne("UniversityLifeApp.Domain.Entities.UserRole", "UserRole")
                        .WithMany("Users")
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("UniversityLifeApp.Domain.Entities.UserWishlist", b =>
                {
                    b.HasOne("UniversityLifeApp.Domain.Entities.BedRoom", "BedRoom")
                        .WithMany("UserWishLists")
                        .HasForeignKey("BedRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UniversityLifeApp.Domain.Entities.User", "User")
                        .WithMany("UserWishLists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BedRoom");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UniversityLifeApp.Domain.Entities.BedRoom", b =>
                {
                    b.Navigation("BedRoomPhotos");

                    b.Navigation("BedRoomRoomTypes");

                    b.Navigation("BedRoomRooms");

                    b.Navigation("UserWishLists");
                });

            modelBuilder.Entity("UniversityLifeApp.Domain.Entities.BedRoomRoom", b =>
                {
                    b.Navigation("BedRoomRoomApplies");

                    b.Navigation("BedRoomRoomPhotos");
                });

            modelBuilder.Entity("UniversityLifeApp.Domain.Entities.BedRoomRoomType", b =>
                {
                    b.Navigation("BedRoomRooms");
                });

            modelBuilder.Entity("UniversityLifeApp.Domain.Entities.City", b =>
                {
                    b.Navigation("BedRooms");

                    b.Navigation("Universities");
                });

            modelBuilder.Entity("UniversityLifeApp.Domain.Entities.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("UniversityLifeApp.Domain.Entities.User", b =>
                {
                    b.Navigation("BedRoomRoomApplies");

                    b.Navigation("UserWishLists");
                });

            modelBuilder.Entity("UniversityLifeApp.Domain.Entities.UserRole", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
